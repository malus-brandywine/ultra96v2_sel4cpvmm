From 545f9a9bc9aa6f17d097f628fe22a1bf4f1d246c Mon Sep 17 00:00:00 2001
From: Nataliya Korovkina <malus.brandywine@gmail.com>
Date: Fri, 4 Aug 2023 15:02:23 -0400
Subject: [PATCH] Add support of seL4 with SMC capability

The changes introduced by the patch presume that seL4 code contains SMC
capability implemented in the code offered by DornerWorks:

[PATCH 1/3] smc_cap: Add SMC Capability with Call method, 8 Nov 2021
[PATCH 2/3] smc_cap: Add badge handling to smc cap, 30 Nov 2021
[PATCH 3/3] smc_cap: allow SMC calls for non-VMM threads, 19 Dec 2022

The patch should be applied to sel4CP if kernel code does contain SMC
capability support no matter (!) how the kernel was configured: wheither
to use SMC API or not.

Signed-off-by: Nataliya Korovkina <malus.brandywine@gmail.com>
---
 build_sdk.py                  |   1 +
 libsel4cp/include/sel4cp.h    |   1 +
 tool/sel4coreplat/__main__.py |  16 ++++++
 tool/sel4coreplat/sel4.py     | 101 +++++++++++++++++-----------------
 tool/sel4coreplat/sysxml.py   |   5 +-
 5 files changed, 74 insertions(+), 50 deletions(-)

diff --git a/build_sdk.py b/build_sdk.py
index 911e423..c3a5277 100644
--- a/build_sdk.py
+++ b/build_sdk.py
@@ -200,6 +200,7 @@ SUPPORTED_BOARDS = (
             "KernelIsMCS": True,
             "KernelArmExportPCNTUser": True,
             "KernelArmHypervisorSupport": True,
+            "KernelAllowSMCCalls": True,
         },
         examples = {}
     ),
diff --git a/libsel4cp/include/sel4cp.h b/libsel4cp/include/sel4cp.h
index e7dbc7d..fedf250 100644
--- a/libsel4cp/include/sel4cp.h
+++ b/libsel4cp/include/sel4cp.h
@@ -20,6 +20,7 @@ typedef seL4_MessageInfo_t sel4cp_msginfo;
 #define REPLY_CAP 4
 #define MONITOR_ENDPOINT_CAP 5
 #define TCB_CAP 6
+#define SMC_CAP 7
 #define BASE_OUTPUT_NOTIFICATION_CAP 10
 #define BASE_ENDPOINT_CAP 74
 #define BASE_IRQ_CAP 138
diff --git a/tool/sel4coreplat/__main__.py b/tool/sel4coreplat/__main__.py
index 865e3f6..de83e64 100644
--- a/tool/sel4coreplat/__main__.py
+++ b/tool/sel4coreplat/__main__.py
@@ -93,6 +93,7 @@ from sel4coreplat.sel4 import (
     INIT_VSPACE_CAP_ADDRESS,
     INIT_ASID_POOL_CAP_ADDRESS,
     IRQ_CONTROL_CAP_ADDRESS,
+    SMC_CAP_ADDRESS,
     SEL4_SLOT_SIZE,
     SEL4_RIGHTS_ALL,
     SEL4_RIGHTS_READ,
@@ -150,6 +151,7 @@ VSPACE_CAP_IDX = 3
 REPLY_CAP_IDX = 4
 MONITOR_EP_CAP_IDX = 5
 TCB_CAP_IDX = 6
+SMC_CAP_IDX = 7
 BASE_OUTPUT_NOTIFICATION_CAP = 10
 BASE_OUTPUT_ENDPOINT_CAP = BASE_OUTPUT_NOTIFICATION_CAP + 64
 BASE_IRQ_CAP = BASE_OUTPUT_ENDPOINT_CAP + 64
@@ -655,6 +657,7 @@ def build_system(
     cap_address_names[INIT_VSPACE_CAP_ADDRESS] = "VSpace: init"
     cap_address_names[INIT_ASID_POOL_CAP_ADDRESS] = "ASID Pool: init"
     cap_address_names[IRQ_CONTROL_CAP_ADDRESS] = "IRQ Control"
+    cap_address_names[SMC_CAP_ADDRESS] = "SMC Cap"
 
     system_cnode_bits = int(log2(system_cnode_size))
 
@@ -1628,6 +1631,19 @@ def build_system(
                                         SEL4_RIGHTS_ALL,
                                         idx))
 
+    # mint SMC cap for PDs which are marked as allowed to invoke SMC calls
+    for idx, (cnode_obj, pd) in enumerate(zip(cnode_objects, system.protection_domains), 1):
+        if pd.smc:
+            system_invocations.append(Sel4CnodeMint(
+                                        cnode_obj.cap_addr,
+                                        SMC_CAP_IDX,
+                                        PD_CAP_BITS,
+                                        root_cnode_cap,
+                                        SMC_CAP_ADDRESS,
+                                        kernel_config.cap_address_bits,
+                                        SEL4_RIGHTS_ALL, # FIXME: set the reasonable permissions
+                                        0))
+
     # All minting is complete at this point
 
     # Associate badges
diff --git a/tool/sel4coreplat/sel4.py b/tool/sel4coreplat/sel4.py
index 2dfc7f0..2fec782 100644
--- a/tool/sel4coreplat/sel4.py
+++ b/tool/sel4coreplat/sel4.py
@@ -265,8 +265,8 @@ INIT_THREAD_IPC_BUFFER_CAP_ADDRESS = 10
 DOMAIN_CAP_ADDRESS = 11
 SMMU_SID_CONTROL_CAP_ADDRESS = 12
 SMMU_CB_CONTROL_CAP_ADDRESS = 13
-INIT_THREAD_SC_CAP_ADDRESS = 14
-
+SMC_CAP_ADDRESS = 14
+INIT_THREAD_SC_CAP_ADDRESS = 15
 
 def _get_n_paging(region: MemoryRegion, bits: int) -> int:
     start = round_down(region.base, 1 << bits)
@@ -819,22 +819,23 @@ AARCH64_LABELS = {
     # ARM Page Directory
     Sel4Label.ARMPageDirectoryMap: 42,
     Sel4Label.ARMPageDirectoryUnmap: 43,
+#    Sel4Label.ARMSMCCall: 44,
     # ARM Page table
-    Sel4Label.ARMPageTableMap: 44,
-    Sel4Label.ARMPageTableUnmap: 45,
+    Sel4Label.ARMPageTableMap: 45,
+    Sel4Label.ARMPageTableUnmap: 46,
     # ARM Page
-    Sel4Label.ARMPageMap: 46,
-    Sel4Label.ARMPageUnmap: 47,
-    Sel4Label.ARMPageClean_Data: 48,
-    Sel4Label.ARMPageInvalidate_Data: 49,
-    Sel4Label.ARMPageCleanInvalidate_Data: 50,
-    Sel4Label.ARMPageUnify_Instruction: 51,
-    Sel4Label.ARMPageGetAddress: 52,
+    Sel4Label.ARMPageMap: 47,
+    Sel4Label.ARMPageUnmap: 48,
+    Sel4Label.ARMPageClean_Data: 49,
+    Sel4Label.ARMPageInvalidate_Data: 50,
+    Sel4Label.ARMPageCleanInvalidate_Data: 51,
+    Sel4Label.ARMPageUnify_Instruction: 52,
+    Sel4Label.ARMPageGetAddress: 53,
     # ARM Asid
-    Sel4Label.ARMASIDControlMakePool: 53,
-    Sel4Label.ARMASIDPoolAssign: 54,
+    Sel4Label.ARMASIDControlMakePool: 54,
+    Sel4Label.ARMASIDPoolAssign: 55,
     # ARM IRQ
-    Sel4Label.ARMIRQIssueIRQHandlerTrigger: 55
+    Sel4Label.ARMIRQIssueIRQHandlerTrigger: 56
 }
 
 AARCH64_PA_44_HYP_LABELS = {
@@ -848,28 +849,29 @@ AARCH64_PA_44_HYP_LABELS = {
     # ARM Page Directory
     Sel4Label.ARMPageDirectoryMap: 42,
     Sel4Label.ARMPageDirectoryUnmap: 43,
+#    Sel4Label.ARMSMCCall: 44,
     # ARM Page table
-    Sel4Label.ARMPageTableMap: 44,
-    Sel4Label.ARMPageTableUnmap: 45,
+    Sel4Label.ARMPageTableMap: 45,
+    Sel4Label.ARMPageTableUnmap: 46,
     # ARM Page
-    Sel4Label.ARMPageMap: 46,
-    Sel4Label.ARMPageUnmap: 47,
-    Sel4Label.ARMPageClean_Data: 48,
-    Sel4Label.ARMPageInvalidate_Data: 49,
-    Sel4Label.ARMPageCleanInvalidate_Data: 50,
-    Sel4Label.ARMPageUnify_Instruction: 51,
-    Sel4Label.ARMPageGetAddress: 52,
+    Sel4Label.ARMPageMap: 47,
+    Sel4Label.ARMPageUnmap: 48,
+    Sel4Label.ARMPageClean_Data: 49,
+    Sel4Label.ARMPageInvalidate_Data: 50,
+    Sel4Label.ARMPageCleanInvalidate_Data: 51,
+    Sel4Label.ARMPageUnify_Instruction: 52,
+    Sel4Label.ARMPageGetAddress: 53,
     # ARM Asid
-    Sel4Label.ARMASIDControlMakePool: 53,
-    Sel4Label.ARMASIDPoolAssign: 54,
+    Sel4Label.ARMASIDControlMakePool: 54,
+    Sel4Label.ARMASIDPoolAssign: 55,
     # ARM VCPU
-    Sel4Label.ARMVCPUSetTCB: 55,
-    Sel4Label.ARMVCPUInjectIRQ: 56,
-    Sel4Label.ARMVCPUReadReg: 57,
-    Sel4Label.ARMVCPUWriteReg: 58,
-    Sel4Label.ARMVCPUAckVPPI: 59,
+    Sel4Label.ARMVCPUSetTCB: 56,
+    Sel4Label.ARMVCPUInjectIRQ: 57,
+    Sel4Label.ARMVCPUReadReg: 58,
+    Sel4Label.ARMVCPUWriteReg: 59,
+    Sel4Label.ARMVCPUAckVPPI: 60,
     # ARM IRQ
-    Sel4Label.ARMIRQIssueIRQHandlerTrigger: 60
+    Sel4Label.ARMIRQIssueIRQHandlerTrigger: 61
 }
 
 AARCH64_PA_40_HYP_LABELS = {
@@ -880,28 +882,29 @@ AARCH64_PA_40_HYP_LABELS = {
     # ARM Page Directory
     Sel4Label.ARMPageDirectoryMap: 40,
     Sel4Label.ARMPageDirectoryUnmap: 41,
+#    Sel4Label.ARMSMCCall: 42,
     # ARM Page table
-    Sel4Label.ARMPageTableMap: 42,
-    Sel4Label.ARMPageTableUnmap: 43,
+    Sel4Label.ARMPageTableMap: 43,
+    Sel4Label.ARMPageTableUnmap: 44,
     # ARM Page
-    Sel4Label.ARMPageMap: 44,
-    Sel4Label.ARMPageUnmap: 45,
-    Sel4Label.ARMPageClean_Data: 46,
-    Sel4Label.ARMPageInvalidate_Data: 47,
-    Sel4Label.ARMPageCleanInvalidate_Data: 48,
-    Sel4Label.ARMPageUnify_Instruction: 49,
-    Sel4Label.ARMPageGetAddress: 50,
+    Sel4Label.ARMPageMap: 45,
+    Sel4Label.ARMPageUnmap: 46,
+    Sel4Label.ARMPageClean_Data: 47,
+    Sel4Label.ARMPageInvalidate_Data: 48,
+    Sel4Label.ARMPageCleanInvalidate_Data: 49,
+    Sel4Label.ARMPageUnify_Instruction: 50,
+    Sel4Label.ARMPageGetAddress: 51,
     # ARM Asid
-    Sel4Label.ARMASIDControlMakePool: 51,
-    Sel4Label.ARMASIDPoolAssign: 52,
+    Sel4Label.ARMASIDControlMakePool: 52,
+    Sel4Label.ARMASIDPoolAssign: 53,
     # ARM VCPU
-    Sel4Label.ARMVCPUSetTCB: 53,
-    Sel4Label.ARMVCPUInjectIRQ: 54,
-    Sel4Label.ARMVCPUReadReg: 55,
-    Sel4Label.ARMVCPUWriteReg: 56,
-    Sel4Label.ARMVCPUAckVPPI: 57,
+    Sel4Label.ARMVCPUSetTCB: 54,
+    Sel4Label.ARMVCPUInjectIRQ: 55,
+    Sel4Label.ARMVCPUReadReg: 56,
+    Sel4Label.ARMVCPUWriteReg: 57,
+    Sel4Label.ARMVCPUAckVPPI: 58,
     # ARM IRQ
-    Sel4Label.ARMIRQIssueIRQHandlerTrigger: 58
+    Sel4Label.ARMIRQIssueIRQHandlerTrigger: 59
 }
 
 RISCV_LABELS = {
@@ -1555,7 +1558,7 @@ def emulate_kernel_boot(
     else:
         raise Exception("Couldn't find appropriate region for initial task kernel objects")
 
-    fixed_cap_count = 0xf
+    fixed_cap_count = 0x10
     sched_control_cap_count = kernel_config.num_cpus
     paging_cap_count = _get_arch_n_paging(kernel_config, initial_task_virt_region)
     page_cap_count = initial_task_virt_region.size // kernel_config.minimum_page_size
diff --git a/tool/sel4coreplat/sysxml.py b/tool/sel4coreplat/sysxml.py
index 87511cd..95922f1 100644
--- a/tool/sel4coreplat/sysxml.py
+++ b/tool/sel4coreplat/sysxml.py
@@ -92,6 +92,7 @@ class ProtectionDomain:
     cpu_affinity: int
     pp: bool
     passive: bool
+    smc: bool
     program_image: Path
     maps: Tuple[SysMap, ...]
     irqs: Tuple[SysIrq, ...]
@@ -289,7 +290,7 @@ def xml2mr(mr_xml: ET.Element, plat_desc: PlatformDescription) -> SysMemoryRegio
 
 
 def xml2pd(pd_xml: ET.Element, plat_desc: PlatformDescription, is_child: bool=False) -> ProtectionDomain:
-    root_attrs = ("name", "priority", "pp", "budget", "period", "cpu", "passive")
+    root_attrs = ("name", "priority", "pp", "budget", "period", "cpu", "passive", "smc")
     child_attrs = root_attrs + ("id", )
     _check_attrs(pd_xml, child_attrs if is_child else root_attrs)
     program_image: Optional[Path] = None
@@ -317,6 +318,7 @@ def xml2pd(pd_xml: ET.Element, plat_desc: PlatformDescription, is_child: bool=Fa
 
     pp = str_to_bool(pd_xml.attrib.get("pp", "false"))
     passive = str_to_bool(pd_xml.attrib.get("passive", "false"))
+    smc = str_to_bool(pd_xml.attrib.get("smc", "false"))
 
     maps = []
     irqs = []
@@ -387,6 +389,7 @@ def xml2pd(pd_xml: ET.Element, plat_desc: PlatformDescription, is_child: bool=Fa
         cpu,
         pp,
         passive,
+        smc,
         program_image,
         tuple(maps),
         tuple(irqs),
-- 
2.17.1

