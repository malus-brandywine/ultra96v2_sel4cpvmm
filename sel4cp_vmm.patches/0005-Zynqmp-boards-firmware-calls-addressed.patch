From 366ea88b66ae941f2663f29cd320ce8f38894bd9 Mon Sep 17 00:00:00 2001
From: Nataliya Korovkina <malus.brandywine@gmail.com>
Date: Fri, 4 Aug 2023 13:45:25 -0400
Subject: [PATCH] Zynqmp boards: firmware calls addressed

Zynqmp boards require invoking of firmware services (SiP services
requested via SMC) to successfully boot Linux. The patch adds basic
solution for it: passthrough of SMC calls that request SiP services.

Signed-off-by: Nataliya Korovkina <malus.brandywine@gmail.com>
---
 Makefile        |  2 +-
 src/sip.c       | 52 +++++++++++++++++++++++++++++++++++++++++++++++++
 src/sip.h       | 10 ++++++++++
 src/smc.c       |  7 +++++++
 src/vgic/vgic.h |  3 +++
 src/vmm.c       | 32 ++++++++++++++++++++++++++++++
 src/vmm.h       |  7 +++++++
 7 files changed, 112 insertions(+), 1 deletion(-)
 create mode 100644 src/sip.c
 create mode 100644 src/sip.h

diff --git a/Makefile b/Makefile
index fe590b3..6c19d34 100644
--- a/Makefile
+++ b/Makefile
@@ -53,7 +53,7 @@ AS := $(TOOLCHAIN)-as
 SEL4CP_TOOL ?= $(SEL4CP_SDK)/bin/sel4cp
 
 # @ivanv: should only compile printf.o in debug
-VMM_OBJS := vmm.o printf.o psci.o smc.o fault.o util.o vgic.o global_data.o
+VMM_OBJS := vmm.o printf.o psci.o smc.o sip.o fault.o util.o vgic.o global_data.o
 
 # @ivanv: hack...
 # This step should be done based on the DTB
diff --git a/src/sip.c b/src/sip.c
new file mode 100644
index 0000000..bbb9edc
--- /dev/null
+++ b/src/sip.c
@@ -0,0 +1,52 @@
+/*
+ * Copyright 2023, Nataliya Korovkina <malus.brandywine@gmail.com>
+ *
+ * SPDX-License-Identifier: GPL-2.0-only
+ */
+
+#include <sel4cp.h>
+#include "smc.h"
+#include "fault.h"
+#include "sip.h"
+#include "util/util.h"
+
+#if defined(BOARD_ultra96v2_hyp)
+
+/* Default handler of SiP service calls passes through all the calls
+   to the firmware without applying any policy
+*/
+bool default_handle_sip_service(uint64_t vcpu_id, seL4_UserContext *regs, uint64_t fn_number)
+{
+
+    seL4_CPtr smc_cap = SMC_CAP;
+    seL4_ARM_SMCContext request;
+    seL4_ARM_SMCContext response;
+
+    request.x0 = regs->x0; request.x1 = regs->x1;
+    request.x2 = regs->x2; request.x3 = regs->x3;
+    request.x4 = regs->x4; request.x5 = regs->x5;
+    request.x6 = regs->x6; request.x7 = regs->x7;
+
+    seL4_ARM_SMC_Call(smc_cap, &request, &response);
+
+    regs->x0 = response.x0; regs->x1 = response.x1;
+    regs->x2 = response.x2; regs->x3 = response.x3;
+    regs->x4 = response.x4; regs->x5 = response.x5;
+    regs->x6 = response.x6; regs->x7 = response.x7;
+
+
+    bool success = fault_advance_vcpu(regs);
+    assert(success);
+
+    return success;
+}
+
+#else
+
+bool default_handle_sip_service(uint64_t vcpu_id, seL4_UserContext *regs, uint64_t fn_number)
+{
+    LOG_VMM_ERR("SiP service functions are not supported for this board\n");
+    return false;
+}
+
+#endif
diff --git a/src/sip.h b/src/sip.h
new file mode 100644
index 0000000..5823c3e
--- /dev/null
+++ b/src/sip.h
@@ -0,0 +1,10 @@
+/*
+ * Copyright 2023, Nataliya Korovkina <malus.brandywine@gmail.com>
+ *
+ * SPDX-License-Identifier: GPL-2.0-only
+ */
+#include <sel4cp.h>
+
+typedef bool (* smc_sip_handler_type)(uint64_t, seL4_UserContext *, uint64_t);
+
+bool default_handle_sip_service(uint64_t vcpu_id, seL4_UserContext *regs, uint64_t fn_number);
diff --git a/src/smc.c b/src/smc.c
index 3ccda8f..0321de8 100644
--- a/src/smc.c
+++ b/src/smc.c
@@ -7,6 +7,7 @@
 
 #include "smc.h"
 #include "psci.h"
+#include "sip.h"
 #include "util/util.h"
 
 // Values in this file are taken from:
@@ -18,6 +19,8 @@
 
 #define SMC_FUNC_ID_MASK 0xFFFF
 
+smc_sip_handler_type smc_sip_handler = default_handle_sip_service;
+
 /* SMC and HVC function identifiers */
 typedef enum {
     SMC_CALL_ARM_ARCH = 0,
@@ -109,6 +112,10 @@ bool handle_smc(uint64_t vcpu_id, uint32_t hsr)
             }
             LOG_VMM_ERR("Unhandled SMC: standard service call %lu\n", fn_number);
             break;
+
+        case SMC_CALL_SIP_SERVICE:
+            return smc_sip_handler(vcpu_id, &regs, fn_number);
+
         default:
             LOG_VMM_ERR("Unhandled SMC: unknown value service: 0x%lx, function number: 0x%lx\n", service, fn_number);
             break;
diff --git a/src/vgic/vgic.h b/src/vgic/vgic.h
index 4ce01f9..1b8309d 100644
--- a/src/vgic/vgic.h
+++ b/src/vgic/vgic.h
@@ -26,6 +26,9 @@
 #define GIC_V3
 #define GIC_DIST_PADDR      0x38800000
 #define GIC_REDIST_PADDR    0x38880000
+#elif defined(BOARD_ultra96v2_hyp)
+#define GIC_V2
+#define GIC_DIST_PADDR      0xf9010000
 #else
 #error Need to define GIC addresses
 #endif
diff --git a/src/vmm.c b/src/vmm.c
index 8055d19..17e61a8 100644
--- a/src/vmm.c
+++ b/src/vmm.c
@@ -9,6 +9,7 @@
 #include "util/util.h"
 #include "vgic/vgic.h"
 #include "smc.h"
+#include "sip.h"
 #include "fault.h"
 #include "hsr.h"
 #include "vmm.h"
@@ -26,6 +27,8 @@ extern char _guest_initrd_image_end[];
 /* seL4CP will set this variable to the start of the guest RAM memory region. */
 uintptr_t guest_ram_vaddr;
 
+extern smc_sip_handler_type smc_sip_handler;
+
 // @ivanv: document where these come from
 #define SYSCALL_PA_TO_IPA 65
 #define SYSCALL_NOP 67
@@ -335,6 +338,25 @@ bool guest_restart(void) {
     return true;
 }
 
+/* Set SMC SiP handler, if NULL is passed, set the default one.
+   Returns pointer to the passed function or NULL if default handler was set.
+   Use "bool" as return type looks misleading, active handler is present anyway.
+*/
+void * register_smc_sip_handler(bool (*smc_sip_handler_func)(uint64_t, seL4_UserContext *, uint64_t))
+{
+    if (smc_sip_handler_func)
+    {
+        smc_sip_handler = smc_sip_handler_func;
+        return smc_sip_handler_func;
+    }
+    else
+    {
+        smc_sip_handler = default_handle_sip_service;
+        return NULL;
+    }
+}
+
+
 void
 init(void)
 {
@@ -346,6 +368,16 @@ init(void)
         LOG_VMM_ERR("Failed to initialise guest images\n");
         assert(0);
     }
+
+    /* After re-design of VMM component to the library, "register_smc_sip_handler"
+       can be an API function to be called from outside.
+       For now it's here, explicitly sets default handler.
+    */
+    if(register_smc_sip_handler(default_handle_sip_service) )
+        LOG_VMM("External SiP handler registered\n");
+    else
+        LOG_VMM("Failed to register external SiP handler, using the default one\n");
+
     // Initialise and start guest (setup VGIC, setup interrupts, TCB registers)
     guest_start();
 }
diff --git a/src/vmm.h b/src/vmm.h
index 327e98c..64d463e 100644
--- a/src/vmm.h
+++ b/src/vmm.h
@@ -26,6 +26,10 @@
 #define GUEST_DTB_VADDR 0x4f000000
 #define GUEST_INIT_RAM_DISK_VADDR 0x4d700000
 #define GUEST_RAM_SIZE 0x10000000
+#elif defined(BOARD_ultra96v2_hyp)
+#define GUEST_DTB_VADDR 0x10600000
+#define GUEST_INIT_RAM_DISK_VADDR 0x12800000
+#define GUEST_RAM_SIZE 0x20000000
 #else
 #error Need to define VM image address and DTB address
 #endif
@@ -42,6 +46,9 @@
 #elif defined(BOARD_imx8mm_evk_hyp)
 #define SERIAL_IRQ_CH 1
 #define SERIAL_IRQ 79
+#elif defined(BOARD_ultra96v2_hyp)
+#define SERIAL_IRQ_CH 1
+#define SERIAL_IRQ 54
 #else
 #error Need to define serial interrupt
 #endif
-- 
2.17.1

